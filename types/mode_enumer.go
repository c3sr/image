// Code generated by "enumer -type=Mode -json -text -yaml -sql"; DO NOT EDIT.

package types

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const (
	_ModeName_0 = "RGBModeBGRModeNonInterlacedRGBModeNonInterlacedBGRMode"
	_ModeName_1 = "InvalidMode"
)

var (
	_ModeIndex_0 = [...]uint8{0, 7, 14, 34, 54}
	_ModeIndex_1 = [...]uint8{0, 11}
)

func (i Mode) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _ModeName_0[_ModeIndex_0[i]:_ModeIndex_0[i+1]]
	case i == 9999:
		return _ModeName_1
	default:
		return fmt.Sprintf("Mode(%d)", i)
	}
}

var _ModeValues = []Mode{0, 1, 2, 3, 9999}

var _ModeNameToValueMap = map[string]Mode{
	_ModeName_0[0:7]:   0,
	_ModeName_0[7:14]:  1,
	_ModeName_0[14:34]: 2,
	_ModeName_0[34:54]: 3,
	_ModeName_1[0:11]:  9999,
}

// ModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ModeString(s string) (Mode, error) {
	if val, ok := _ModeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Mode values", s)
}

// ModeValues returns all values of the enum
func ModeValues() []Mode {
	return _ModeValues
}

// IsAMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Mode) IsAMode() bool {
	for _, v := range _ModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Mode
func (i Mode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Mode
func (i *Mode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Mode should be a string, got %s", data)
	}

	var err error
	*i, err = ModeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Mode
func (i Mode) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Mode
func (i *Mode) UnmarshalText(text []byte) error {
	var err error
	*i, err = ModeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for Mode
func (i Mode) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Mode
func (i *Mode) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ModeString(s)
	return err
}

func (i Mode) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Mode) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := ModeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
