// Code generated by "enumer -type=ResizeAlgorithm -json -text -yaml -sql"; DO NOT EDIT.

package types

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _ResizeAlgorithmName = "ResizeAlgorithmLinearResizeAlgorithmLinearASMResizeAlgorithmHermiteResizeAlgorithmNearestNeighbor"

var _ResizeAlgorithmIndex = [...]uint8{0, 21, 45, 67, 97}

func (i ResizeAlgorithm) String() string {
	if i < 0 || i >= ResizeAlgorithm(len(_ResizeAlgorithmIndex)-1) {
		return fmt.Sprintf("ResizeAlgorithm(%d)", i)
	}
	return _ResizeAlgorithmName[_ResizeAlgorithmIndex[i]:_ResizeAlgorithmIndex[i+1]]
}

var _ResizeAlgorithmValues = []ResizeAlgorithm{0, 1, 2, 3}

var _ResizeAlgorithmNameToValueMap = map[string]ResizeAlgorithm{
	_ResizeAlgorithmName[0:21]:  0,
	_ResizeAlgorithmName[21:45]: 1,
	_ResizeAlgorithmName[45:67]: 2,
	_ResizeAlgorithmName[67:97]: 3,
}

// ResizeAlgorithmString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ResizeAlgorithmString(s string) (ResizeAlgorithm, error) {
	if val, ok := _ResizeAlgorithmNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ResizeAlgorithm values", s)
}

// ResizeAlgorithmValues returns all values of the enum
func ResizeAlgorithmValues() []ResizeAlgorithm {
	return _ResizeAlgorithmValues
}

// IsAResizeAlgorithm returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ResizeAlgorithm) IsAResizeAlgorithm() bool {
	for _, v := range _ResizeAlgorithmValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ResizeAlgorithm
func (i ResizeAlgorithm) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ResizeAlgorithm
func (i *ResizeAlgorithm) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ResizeAlgorithm should be a string, got %s", data)
	}

	var err error
	*i, err = ResizeAlgorithmString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for ResizeAlgorithm
func (i ResizeAlgorithm) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ResizeAlgorithm
func (i *ResizeAlgorithm) UnmarshalText(text []byte) error {
	var err error
	*i, err = ResizeAlgorithmString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for ResizeAlgorithm
func (i ResizeAlgorithm) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for ResizeAlgorithm
func (i *ResizeAlgorithm) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ResizeAlgorithmString(s)
	return err
}

func (i ResizeAlgorithm) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *ResizeAlgorithm) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := ResizeAlgorithmString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
